/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    input spi_mosi,
    output reg spi_miso,
    input spi_sck,
    input spi_cs,
    input pdm_a_in,
    input pdm_b_in,
    output reg pdm_a_out,
    output reg pdm_b_out,
    output reg clock_a,
    output reg clock_b
  );
  
  
  
  reg rst;
  
  reg [7:0] databyte;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [7:0] M_send_byte_d, M_send_byte_q = 1'h0;
  reg [7:0] M_last_d, M_last_q = 1'h0;
  reg [1:0] M_framecounter_d, M_framecounter_q = 1'h0;
  reg M_waiting_d, M_waiting_q = 1'h0;
  reg M_last_clock_d, M_last_clock_q = 1'h0;
  wire [1-1:0] M_myBlinker_blink;
  blinker_2 myBlinker (
    .clk(clk),
    .rst(rst),
    .blink(M_myBlinker_blink)
  );
  wire [1-1:0] M_spi_sdo;
  wire [1-1:0] M_spi_done;
  wire [8-1:0] M_spi_data_out;
  spi_peripheral_3 spi (
    .clk(clk),
    .rst(rst),
    .sdi(spi_mosi),
    .sck(spi_sck),
    .cs(spi_cs),
    .data_in(databyte),
    .sdo(M_spi_sdo),
    .done(M_spi_done),
    .data_out(M_spi_data_out)
  );
  
  always @* begin
    M_send_byte_d = M_send_byte_q;
    M_last_clock_d = M_last_clock_q;
    M_waiting_d = M_waiting_q;
    M_last_d = M_last_q;
    M_framecounter_d = M_framecounter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_last_clock_d = M_myBlinker_blink;
    clock_a = M_myBlinker_blink;
    clock_b = M_myBlinker_blink;
    pdm_a_out = pdm_a_in;
    pdm_b_out = pdm_b_in;
    if (!M_spi_done && M_last_clock_q == 1'h0 && M_myBlinker_blink == 1'h1) begin
      if (!M_waiting_q) begin
        if (M_framecounter_q == 2'h0) begin
          M_send_byte_d[5+0-:1] = pdm_a_in;
          M_send_byte_d[4+0-:1] = pdm_b_in;
          M_framecounter_d = M_framecounter_q + 1'h1;
        end
        if (M_framecounter_q == 2'h1) begin
          M_send_byte_d[3+0-:1] = pdm_a_in;
          M_send_byte_d[2+0-:1] = pdm_b_in;
          M_framecounter_d = M_framecounter_q + 1'h1;
        end
        if (M_framecounter_q == 2'h2) begin
          M_send_byte_d[1+0-:1] = pdm_a_in;
          M_send_byte_d[0+0-:1] = pdm_b_in;
          M_framecounter_d = M_framecounter_q + 1'h1;
          M_waiting_d = 1'h1;
        end
      end
      if (M_framecounter_q == 2'h3) begin
        M_framecounter_d = 2'h0;
      end
    end
    M_send_byte_d[7+0-:1] = M_waiting_q;
    M_send_byte_d[6+0-:1] = 1'h0;
    if (M_spi_done) begin
      if (M_waiting_q) begin
        M_last_d = M_spi_data_out;
        M_waiting_d = 1'h0;
        M_framecounter_d = 2'h0;
        M_send_byte_d = 8'h00;
      end
    end
    databyte = M_send_byte_q;
    led = M_last_q;
    spi_miso = M_spi_sdo;
    usb_tx = usb_rx;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_send_byte_q <= 1'h0;
      M_last_q <= 1'h0;
      M_framecounter_q <= 1'h0;
      M_waiting_q <= 1'h0;
      M_last_clock_q <= 1'h0;
    end else begin
      M_send_byte_q <= M_send_byte_d;
      M_last_q <= M_last_d;
      M_framecounter_q <= M_framecounter_d;
      M_waiting_q <= M_waiting_d;
      M_last_clock_q <= M_last_clock_d;
    end
  end
  
endmodule
